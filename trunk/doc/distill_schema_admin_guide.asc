Distill Schema Admin Guide
==========================
:Author:    Michael Persson
:Email:     michael.persson@greenfieldlabs.net

== Background

Distill allows you to generate configuration using hierarchical substitution and use this as an input for Puppet through the Puppet YAML ENC.

However this doesn't guarantee that the configuration provided is formated correctly. Therefore it is recommended to introduce a validation step for the configuration. This is where Distill Schema is usefull it can validate Distill configuration using JSON schemas, this insures the data structure is correct and you can also validate entries using regular expression.

The JSON schema files are stored in the /etc/distill/schema directory and is split up per module. This makes it easy to review and change the schemas for each module.

When Distill Schema is run, it will merge all the module schemas to one schema and use this to validate the output from Distill.

== Structure

=== Site

For each site there is one site schema that has the basic structure and all parameters.

.schema/site.json
----
{
   "type": "object",
   "additionalProperties": false,
   "properties": {
        "classes": {
            "type": "object",
            "additionalProperties": true,
            "properties": {
            }
        },
        "parameters": {
            "type": "object",
            "additionalProperties": true,
            "properties": {
            }
        }
    }
}
----

=== Module

For each module there is one schema file.

.schema/module/bashrc.json
----
{
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "bashrc": {
            "type": "null"
        }
    }
}
----

=== type

Type defines which type of object we're validating this is usually "string", "number", "null", "object", "array".

==== string

A string is a normal text string.

==== number

A number is a normal decimal number.

==== null

null is an empty entry.

==== object

An object is a hash i.e. key/value pairs.

==== array

An array is a list of entries.

=== additionalProperties

So for the site schema we're first defining an object (hash) that must contain 2 entries. The reason for this is that we set additionalProperties to false which means it won't allow any additional entries.

=== properties

Properties defines a number of sub-entries in a hash.

== Module schemas

If you look underneath the "classes" object, this is where class JSON schemas will be merged. Since "additionalProperties" is set to true it will allow additional entries. Schemas from modules will be merged here.

Example from bashrc module that doesn't take any parameters.

----
{
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "bashrc": {
            "type": "null"
        }
    }
}
----

First we're defining a has hash that doesn't allow for any additional entries.

So this would validate true for the following JSON ENC input.

----
{
    "bashrc": null
}
----

== Schema with parameters

In the following example we allow the passing of additional parameters to ssh configuration files.

The class definition in Puppet looks as following.

----
class ssh($ssh_opts = undef, $sshd_opts = undef) {
----

The JSON ENC looks like the following, it's a list of options.

----
{
    "ssh": {
        "sshd_opts": [
            "PermitRootLogin no",
            "PasswordAuthentication no"
        ]
    }
}
-----

To verify this we have to use a new statement *items* since we're passing an array.

----
{
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "ssh": {
            "type": [ "object", "null" ],
            "additionalProperties": false,
            "properties": {
                "ssh_opts": {
                    "type": "array",
                    "items": {
                        "type" : "string"
                    }
                },
                "sshd_opts": {
                    "type": "array",
                    "items": {
                        "type" : "string"
                    }
                }
            }
        }
    }
}
----

=== items

Validate items in a list.

== Schema with nested hashes

A more complicated example is when you have nested data types like a hash in a hash.

----
{
    "ssh::auth_keys": {
        "keys": {
            "infrastructure": {
                "user": "root",
                "type": "ssh-dss",
                "key": "AAAAB3NzaC1kc3..."
            }
        }
    }
}
----

The class definition in Puppet looks as following.

----
class ssh::auth_keys($keys, $overwrite = false) {
----

To do this we basically replicate the same structure as in the input inside the Schema.

----
{
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "ssh::auth_keys": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "keys": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "user": {
                                    "type": "string",
                                    "required": true,
                                    "pattern": "^[a-z0-9\\-_]+$"
                                },
                                "type": {
                                    "type": "string",
                                    "required": true,
                                    "enum": [ "ssh-dss" ]
                                },
                                "key": {
                                    "type": "string",
                                    "required": true
                                }
                            }
                        }
                    }
                },
                "overwrite": {
                    "type": "boolean"
                }
            }
        }
    }
}
----

You'll notice I'm using a new statement *patternProperties* this allows matching sub entries using a regex.

=== patternProperties

patternProperties defines a number of sub-entries in a hash using regular experssion.

=== required

Specifies if an entry is required or not.

=== pattern

Allows for regex validation of the entry.

== Links

=== IETF JSON Schema
http://tools.ietf.org/html/draft-zyp-json-schema-03[IETF JSON Schema]

<<<

== Example Schemas

=== modules/ssh/schema/ssh_schema.json

----
{
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "ssh": {
            "type": [ "object", "null" ],
            "additionalProperties": false,
            "properties": {
                "ssh_opts": {
                    "type": "array",
                    "items": {
                        "type" : "string"
                    }
                },
                "sshd_opts": {
                    "type": "array",
                    "items": {
                        "type" : "string"
                    }
                }
            }
        },
        "ssh::auth_keys": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "keys": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "user": {
                                    "type": "string",
                                    "required": true,
                                    "pattern": "^[a-z0-9\\-_]+$"
                                },
                                "type": {
                                    "type": "string",
                                    "required": true,
                                    "enum": [ "ssh-dss" ]
                                },
                                "key": {
                                    "type": "string",
                                    "required": true
                                }
                            }
                        }
                    }
                },
                "overwrite": {
                    "type": "boolean"
                }
            }
        }
    }
}
----
