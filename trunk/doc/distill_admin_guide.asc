Distill Admin Guide
===================
:Author:    Michael Persson
:Email:     michael.persson@greenfieldlabs.net

== Installing Distill

You can either run Distill on the same server as Puppet or runt as a standalone server.

. Running on Pupppet server
. Standalone using Web Services

=== Running on Puppet server

.Install
----
# yum install -y distill
----

Create initial directory structure.
----
$ mkdir -p /etc/distill/input/{host,host_group}
$ mkdir -p /etc/distill/template/{shared,staged}/{default,operatingsystem,operatingsystemrelease}
----

Configure Puppet with an external ENC.

./etc/puppet/puppet.conf
----
[master]
    node_terminus = exec
    external_nodes = /usr/bin/enc-lookup
----

Configure Puppet REST API permissions.

./etc/puppet/auth.conf
----
path /fact
method find
auth no
allow *

path /certificate_status
method find
auth no
allow *
----

After this you should only need to restart the Puppet services.

=== Standalone server using Web Services

==== Configuring Puppet Server

.Install
----
# yum install -y distill
----

Configure Puppet with an external ENC.

./etc/puppet/puppet.conf
----
[master]
    node_terminus = exec
    external_nodes = /usr/bin/enc-lookup
----

Configure Distill to query Distill server.

./etc/distill/distill.conf
----
web-lookup = true
url = http://<server>/distill
----

Configure Puppet REST API permissions.

./etc/puppet/auth.conf
----
path /fact
method find
auth no
allow *

path /certificate_status
method find
auth no
allow *
----

After this you should only need to restart the Puppet services.

==== Configuring Distill server

.Install
----
# yum install -y distill
----

Create initial directory structure.
----
$ mkdir -p /etc/distill/input/{host,host_group}
$ mkdir -p /etc/distill/template/{shared,staged}/{default,operatingsystem,operatingsystemrelease}
----

After this you should enable and start the services.

.Enable and start services
----
# chkconfig httpd on
# service httpd start
----

.Verify Web Service
----
# enc-lookup -w <host>
# export API_URI="http://<server>/distill/index.pl"
# curl "$API_URI/client/enc/yaml?host=<host>"
----

==== Puppet Client

.Verify Puppet Server
----
# puppetd --server <server> --pluginsync --waitforcert 60 --test --noop
----

== Distill file structure

This is the default file structure for Distill.

----
/etc/distill/
	input/
		host/
		host_group/
		host_location/
	template/
		shared/
		staged/
----

=== Input for a specific host

Host input allows for per host input parameters like ip-address, network, owner etc.

.input/host/myhost.mydomain.json
----
{
	"ip-address": "192.168.0.2",
	"network": "192.168.0.0/24",
	"owner": "networking"
}
----

=== Create a group of hosts

Host group provides a way to group hosts together. A host can belong to one or more groups.

.input/host_group/mysql_server.json
----
{
	"name": "MySQL Server",
	"hosts": [
		"mysql1.mydomain.com",
		"mysql2.mydomain.com",
		"mysql3.mydomain.com"
	]
}
----

=== Shared templates folder

Shared templates will be the same for all environments example: Dev., QA, Prod. This is useful when you have configuration that needs to be available in production immediately. Normally it's better to avoid shared configuration unless you really need it. The normal use case is host/host_group templates, templates that affect a larger number of machines it's usually advisable to stage the configuration.

=== Staged templates folder

Staged configuration will only be published to the Dev. environment and once tested it can be promoted to QA and Prod.

== Distill Templates

Templates are always parsed in a predefined order substituting any previous key/value pairs.

For calling classes you append double colon *::* anything after this will be interpreted as an argument to this class.

.call Class without arguments
----
{
	"bashrc": null
}
----

This would work for a Puppet class defined as.

----
class bashrc {
----

.call Class with parameter
----
{
	"timezone::timezone": "Europe/Zurich"
}
----

This would work for a Puppet class defined as.

----
class timezone($timezone) {
----

For this example I will add the following substitution order for Distill.

./etc/distill/distill.conf
----
sequence = network, region, country, city, datacenter, owner, host
----

So first we create a template for the network, so we can provide location information.

.template/shared/network/192.168.0.0_24.json
----
{
	"subnet": "255.255.255.0",
	"gateway": "192.168.0.1",
	"region": "Europe",
	"country": "Switzerland",
	"city": "Zurich",
	"datacenter": "Plex"
}
----

Then we use the location information provided by the network to set regional specific settings.

.template/shared/region/europe.json
----
{
	"timezone::timezone": "CET"
	"resolv::dns_servers": [
		"192.168.0.5",
		"192.168.0.6"
	],
	"sendmail::mail_server": "smtp.mydomain.com",
	"ntp::ntp_servers": [
		"ntp1.eu.mydomain.com",
		"ntp2.eu.mydomain.com",
		"ntp3.eu.mydomain.com"
	]
}
----

Then we unset sendmail for this host.

.template/shared/host/myhost.mydomain.json
----
{
	"u:sendmail::mail_server": null
}
----

The end result of this will be.

.JSON ENC
----
{
	"classes": {
		"timezone": {
			"timezone": "CET"
		},
		"resolv": {
			"dns_servers": [
				"192.168.0.5",
				"192.168.0.6"
			]
		},
		"ntp": {
			"ntp_servers": [
				"ntp1.eu.mydomain.com",
				"ntp2.eu.mydomain.com",
				"ntp3.eu.mydomain.com"
			]
		}
	},
	"parameters": {
		"subnet": "255.255.255.0",
		"gateway": "192.168.0.1",
		"region": "Europe",
		"country": "Switzerland",
		"city": "Zurich",
		"datacenter": "Plex"
	}
}
----

== Distill operators

Distill currently support 4 different operations substitution, unset, merge and immutable.

.Distill operators
[options="header"]
|==============================================================
|Operator |Action             |Description
|u:       |Unset              |Unset key, list item or hash key
|m:       |Merge              |Merge array or hash
|i:       |Immutable          |Prevent a key from being changed
|e:       |Expand             |Expand value from another key
|iu:      |Immutable + Unset  |Combine immutable and unset
|im:      |Immutable + Merge  |Combine immutable and merge
|ie:      |Immutable + Expand |Combine immutable and expand
|==============================================================

=== Distill Operators examples

.Unset a key
----
{
	"u:datacenter": null
}
----

.Unset a list item
----
{
	"u:ntp::ntp_servers": [
		"ntp3.eu.mydomain.com"
	]
}
----

.Unset a hash key
----
{
	"u:users": {
		"jdoe": null
	}
}
----

NOTE: Unset doesn't support unsetting keys inside nested hashes.

.Merge list's
----
{
	"m:ntp::ntp_servers": [
		"ntp4.eu.mydomain.com"
	]
}
----

.Merge hashes
----
{
	"m:users": {
		"mpersson": {
			"uid": "500",
			"gid": "500",
			"name": "Michael Persson",
			"home": "/home/mpersson",
			"shell": "/bin/bash"
		}
	}
}
----

.Immutable
----
{
	"i:ntp::ntp_servers": [
				"ntp1.eu.mydomain.com",
				"ntp2.eu.mydomain.com",
				"ntp3.eu.mydomain.com"
			]
}
----

NOTE: This means that no other template can replace or change these values

.Expand
----
{
    "e:postfix::mail_server": "sendmail::mail_server"
}
----

== Distill REST API

.Get host Puppet ENC in JSON format
----
# export API_URI="http://distill-dev/distill/index.pl"
# curl "$API_URI/client/enc/json?host=<fqdn>"
----

.Get host Puppet ENC in YAML format
----
# curl "$API_URI/client/enc/yaml?host=<fqdn>"
----

.Get all host Puppet ENC's in JSON format
----
# curl "$API_URI/client/enc/json/all"
----

.Get host Hash in JSON format
----
# curl "$API_URI/client/json?host=<fqdn>"
----

.Get host Hash in YAML format
----
# curl "$API_URI/client/yaml?host=<fqdn>"
----

.Get all host Hashes in JSON format 
----
# curl "$API_URI/client/json/all"
----

.Get all hosts that has a specific parameter in JSON format
----
# curl "$API_URI/client/has/parameter/json?parameter=sendmail::mail_server"
----

.Get all hosts that has a specific parameter and value in JSON format
----
# curl "$API_URI/client/has/parameter/json?parameter=sendmail::mail_server=smtp.mydomain.com"
----

.Get all hosts that has a specific class
----
# curl "$API_URI/client/has/class/json?class=sendmail"
----

.Get all hosts
----
# curl "$API_URI/client/cached/json/all"
----

.Get all hosts changed since a specific time ago
----
# curl "$API_URI/client/cached/changed/json?changed_since=5-days-ago"
----

.Accepted values
[options="header"]
|===========
|Value
|x-sec-ago
|x-min-ago
|x-hour-ago
|x-hours-ago
|x-day-ago
|x-days-ago
|x-week-ago
|x-weeks-ago
|===========

== Distill environments

In order to support multiple environments that you might be using in Puppet. Distill will parse the Fact environment for the host and use this to allow overrides in the configuration file like this:

./etc/distill/distill.conf
----
[main]
sequence = default, region, country, datacenter, owner, host_group, host
user = apache
group = apache
# Allow override environment from host Fact
override-environment = true

[lookup]
web-lookup = true
url = http://localhost/distill

[facter]
facts = macosx_productversion_major

# Override basedir and sequence for environment macosx
[macosx]
basedir = /etc/distill/macosx
sequence = default, region, country, datacenter, macosx_productversion_major, host_group, host
----
